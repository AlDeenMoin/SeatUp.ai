# SeatUp.io CI/CD Pipeline
# Comprehensive workflow for full-stack HRMS application
# Handles Frontend (React/TS), Backend (Node.js), AI (Python), and DevOps

name: SeatUp.io CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'
  
jobs:
  
  # Security and Code Quality Scanning
  security-scan:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
  
  # Frontend Tests and Build (React + TypeScript)
  frontend:
    name: Frontend CI/CD
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run TypeScript type checking
        run: npm run type-check
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run unit tests
        run: npm run test:ci
        
      - name: Build frontend
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 7
  
  # Backend Tests and Build (Node.js + Express)
  backend:
    name: Backend CI/CD
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: seatup_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run unit tests
        run: npm run test
        env:
          DATABASE_URL: postgres://test_user:test_pass@localhost:5432/seatup_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          NODE_ENV: test
          
      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgres://test_user:test_pass@localhost:5432/seatup_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          NODE_ENV: test
  
  # AI/ML Services Tests (Python + FastAPI)
  ai-services:
    name: AI Services CI/CD
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: ai/requirements.txt
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio flake8
          
      - name: Run Flake8 linting
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
      - name: Run unit tests
        run: pytest tests/ -v --cov=. --cov-report=xml
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./ai/coverage.xml
          flags: ai-services
  
  # Docker Build and Security Scanning
  docker:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [frontend, backend, ai-services]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          tags: seatup-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          tags: seatup-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build AI Services Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./ai
          push: false
          tags: seatup-ai:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Run Trivy vulnerability scanner on Frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: seatup-frontend:latest
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
          
      - name: Run Trivy vulnerability scanner on Backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: seatup-backend:latest
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
          
      - name: Run Trivy vulnerability scanner on AI Services
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: seatup-ai:latest
          format: 'sarif'
          output: 'trivy-ai-results.sarif'
  
  # Database Migration Validation
  database:
    name: Database Migration Check
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: seatup_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install migration tools
        run: |
          cd backend
          npm ci
          
      - name: Run migrations
        run: |
          cd backend
          npm run migrate
        env:
          DATABASE_URL: postgres://test_user:test_pass@localhost:5432/seatup_test
          
      - name: Validate database schema
        run: |
          cd backend
          npm run db:validate
        env:
          DATABASE_URL: postgres://test_user:test_pass@localhost:5432/seatup_test
  
  # End-to-End Tests (Playwright)
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
          cd ../backend
          npm ci
          
      - name: Start backend server
        run: |
          cd backend
          npm start &
          sleep 10
        env:
          DATABASE_URL: postgres://test_user:test_pass@localhost:5432/seatup_test
          JWT_SECRET: test-jwt-secret
          
      - name: Run E2E tests
        run: |
          cd frontend
          npm run test:e2e
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 7
  
  # Performance and Accessibility Testing
  lighthouse:
    name: Performance & Accessibility
    runs-on: ubuntu-latest
    needs: [frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli
        
      - name: Run Lighthouse CI
        run: lhci autorun
        
      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 7
  
  # Deployment Readiness Check
  deployment-ready:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [security-scan, frontend, backend, ai-services, docker, database, e2e-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: All checks passed
        run: |
          echo "🎉 All CI/CD checks passed successfully!"
          echo "✅ Security scanning completed"
          echo "✅ Frontend build and tests passed"
          echo "✅ Backend build and tests passed"
          echo "✅ AI services build and tests passed"
          echo "✅ Docker images built and scanned"
          echo "✅ Database migrations validated"
          echo "✅ End-to-end tests completed"
          echo "🚀 Ready for deployment!"
          
      - name: Notify deployment readiness
        run: |
          echo "Deployment artifacts ready:"
          echo "- Frontend build: Available"
          echo "- Backend build: Available" 
          echo "- AI services: Tested and ready"
          echo "- Docker images: Built and scanned"
          echo "- Database: Migrations validated"
          echo "- Security: CodeQL and Trivy scans completed"
          echo "- Performance: Lighthouse analysis completed"
